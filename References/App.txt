import './App.css';
import { useState } from "react";
import { BrowserRouter, Routes , Route , Link, useNavigate } from "react-router-dom";
import { 
  BarChart, Bar, 
  PieChart, Pie, Cell,
  XAxis, YAxis, Legend, 
  ResponsiveContainer 
} from "recharts";
type Expense = {
    id:string
    name:string;
    category:string;
    amount:number;
    date:string;
  };
//app starts here
function App(){
  return(
  <div className="app">
    <AddBtn />
  </div>
  );
}
function AddBtn(){
  return(
//handles the button using react router by using a link that routes to the add expense page
  <BrowserRouter>
    <nav className="navContainer">
    <Link to="/addExpense" className="nav">+
    </Link>
    <Link to="/" className="linkBtn">Go Back To The Homepage</Link>
    </nav>
    <Routes>
      <Route path="/" element={<Home />} />
      <Route path="/addExpense" 
      element={<AddExpense />} />
      <Route path="/dashboard" 
      element={<DashBoard />} />
    </Routes>
  </BrowserRouter>
  );
}
function Home(){
  return(
    <div className="homeContainer">
    <h1>My Expenses</h1>
    <ShowExpenses />
    </div>
    );
}
function AddExpense(){
//declaring useState states and useNavigate
  const [category, setCategory] = 
  useState<string>("");
  const [expense, setExpense] = 
  useState<number | string>("");
  const [date, setDate] = 
  useState<string>("");
  const [expenseName, setExpenseName] =
  useState<string>("");
  const navigate = useNavigate();
//custom capitalize func for consistency
function capitalize(word:string):string {
  return word
    ? word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
    : "";
}
//the expense variable with props for reusability and scaling + expensesArray
  const newExpense:Expense = {
  id:crypto.randomUUID(),
  name:capitalize(expenseName), 
  category:capitalize(category), 
  amount:typeof expense === "string" ? parseFloat(expense) : expense, 
  date
  };
  
  const expensesArray:Expense[] =
  JSON.parse(localStorage.getItem("expenses") || "[]") as Expense[];
// starting the submitting func
  const handleSubmit = 
  (event:React.FormEvent<HTMLFormElement>) =>
  {event.preventDefault();
//saves with localStorage with the expensesArray having newExpense objects as values being pushed into it
  expensesArray.push(newExpense);
  localStorage.setItem("expenses",
  JSON.stringify(expensesArray));
//Resetting the form + navigating back to the home with useNavigate
 setCategory("");
 setExpense("");
 setExpenseName("");
 setDate("");
 navigate("/");
}
//The expense input form
  return(
   <form className="formContainer1"
   onSubmit={handleSubmit}>
     <input
     type="text"
     value={expenseName}
     onChange= {(event) =>
     setExpenseName(event.target.value)}
     placeholder="Enter expense name..."
     required/>
     <input
     type="text"
     value={category}
     onChange= 
     {(event:React.ChangeEvent<HTMLInputElement>) =>
     setCategory(event.target.value)}
     placeholder="Enter expense category..."
     required/>
     <input
     type="date"
     value={date}
     onChange= 
     {(event:React.ChangeEvent<HTMLInputElement>) =>
     setDate(event.target.value)}
     placeholder="Enter expense date..." />
     <input
     type="number"
     value={expense}
     onChange= 
     {(event:React.ChangeEvent<HTMLInputElement>) =>
     setExpense(Number(event.target.value) || 0) }
     placeholder="Enter expense amount..."
     required/>
   <button type="submit" className="subBtn">
     Save Expense
   </button>
   </form>
    );
};
function ShowExpenses(){
//declaring states
  const [open,setOpen] = 
  useState<boolean>(false);
  const [nameFilter,setNameFilter] = 
  useState<string>("");
  const [categoryFilter,setCategoryFilter] =
  useState<string>("");
  const [dateFilter,setDateFilter] = 
  useState<string>("");
  const [expenses,setExpenses] = 
useState<Expense[]>(() =>
JSON.parse(localStorage.getItem("expenses") || "[]") as Expense[]);
//toggle for filters
 const toggleFilter = () => setOpen(!open);
//filtered array logic & variable
  const filteredRender:Expense[] = 
  expenses.filter(newExpense =>
  newExpense.name.toLowerCase().includes(nameFilter.toLowerCase()) &&
  newExpense.category.toLowerCase().includes(categoryFilter.toLowerCase()) &&
  newExpense.date.slice(0,7).includes(dateFilter.slice(0,7)));
//function for deleting
  const handleDelete = (id: string) =>
   {const newArray:Expense[] = 
    expenses.filter(expense => 
    expense.id !== id);
    setExpenses(newArray);
  localStorage.setItem("expenses",
  JSON.stringify(newArray));
  }
//the filters form + rendering the filtered array, if no filters are given the original expenses array renders
return (
  <div>
    <div className="searchFiltersContainer">
    <div className="btnContainer">
      <Link to="/dashboard" className="dashBtn">
        View DashBoard
      </Link>
    <button className=
    {`filterBtn ${open ? "open" : ""}`} 
    onClick={toggleFilter} >
      {`${open ? "X" : "Filter Expenses"}`}</button>
      </div>
    <form className=
    {`formContainer ${open? "open" : ""}`}>
         <input
     type="text"
     value={nameFilter}
     onChange= 
     {(event:React.ChangeEvent<HTMLInputElement>) =>
     setNameFilter(event.target.value)}
     placeholder="Enter expense name filter..." />
     <input
     type="text"
     value={categoryFilter}
     onChange= 
     {(event:React.ChangeEvent<HTMLInputElement>) =>
     setCategoryFilter(event.target.value)}
     placeholder="Enter expense category filter..." />
     <input
     type="date"
     value={dateFilter}
     onChange= 
     {(event:React.ChangeEvent<HTMLInputElement>) =>
     setDateFilter(event.target.value)}
     placeholder="Enter expense date filter..." />
    </form>
    </div>
  <div className="expensesContainer">
    {filteredRender.map((item) => ( 
   <div key={item.id} className="expenseItem" >
     {Object.entries(item).filter(([key]) => key !== "id").map(([key,value]:[string | number,string | number]) => (
     <p key={key} >
       {key} : {value}
     </p>
     ))}
     <button className="Btn" onClick={() => handleDelete(item.id)} >Delete</button>
   </div>
    ))}
  </div>
  </div>
  );
}
// visualising the data in charts with recharts
function DashBoard() {
const expenses:Expense[] = JSON.parse(localStorage.getItem("expenses") || "[]");
//calculating total in a variable
  const total = 
  expenses.reduce((sum:number,newExpense:Expense) => 
  sum + Number(newExpense.amount), 0);
//calculating the total by category in a variable
  const byCategory =
  expenses.reduce((acc:Record<string,number>, newExpense:Expense) => {
  acc[newExpense.category] = 
  (acc[newExpense.category] || 0 ) + Number(newExpense.amount);
  return acc;
  } , {});
//calculating the monthly total in a variable
  const monthly =
  expenses.reduce((Acc:Record<string,number>, newExpense:Expense) => {
  const month = newExpense.date.slice(0,7)
  Acc[month] = (Acc[month] || 0) + Number(newExpense.amount);
  return Acc;
   },{});
  type CategoryData ={category:string;total:number};
  type MonthlyData ={month:string;total:number};
  const categoryObject:CategoryData[] =Object.entries(byCategory).map(([key,value]) => ({category:key,total:value}));
  const monthlyObject:MonthlyData[] =Object.entries(monthly).map(([key,value]) => ({month:key,total:value})).sort((a,b) => a.month.localeCompare(b.month));
//the charts 
return(
<div className="dashboardFlexbox">
   <div className="totalContainer">
     <h2 className="totalHead">Total</h2>
     <h2 className="total">{total}</h2>
   </div>
<div className="dashBoardContainer">
   <ResponsiveContainer 
   className="barChart" 
   width = "100%" height = {260}>
     <BarChart data={categoryObject}>
     <XAxis dataKey="category" 
     tick={{ fontSize: 10 }} />
     <YAxis />
     <Bar name="Expenses By Category" dataKey="total">
       {categoryObject.map((color,index) => (
       <Cell
       key={`cell-${index}`}
       fill={["#df1255","#3467df","#40c980","#af00bd","#cfbf30","#ff8822"][index % 6]} />
       ))}
     </Bar>   
     </BarChart>
   </ResponsiveContainer>
   <ResponsiveContainer 
   className="PieChart"
   width="100%" height={260} >
     <PieChart>
       <Pie data={categoryObject}
       dataKey="total"
       nameKey="category"
       outerRadius={65}
       label >
      {categoryObject.map((color,index) => (
       <Cell
       key={`cell-${index}`}
       fill={["#df1255","#3467df","#40c980","#af00bd","#cfbf30","#ff8822"][index % 6]} />
       ))}
       </Pie>
       <Legend />
     </PieChart>
   </ResponsiveContainer>
   <ResponsiveContainer 
   className="barChart" 
   width = "100%" height = {260} >
     <BarChart data={monthlyObject}>
      <XAxis dataKey="month" 
      tick={{ fontSize: 10 }} />
     <YAxis />
     <Bar name="Expenses Per Month" 
     dataKey="total">
       {monthlyObject.map((color,index) => (
       <Cell
       key={`cell-${index}`}
       fill={["#df1255","#3467df","#40c980","#af00bd","#cfbf30","#ff8822"][index % 6]} />
       ))}
     </Bar>   
     </BarChart>
   </ResponsiveContainer>
   <ResponsiveContainer 
   className="PieChart"
   width="100%" height={260} >
     <PieChart>
       <Pie data={monthlyObject}
       dataKey="total"
       nameKey="month"
       outerRadius={65}
       label >
      {monthlyObject.map((color,index) => (
       <Cell
       key={`cell-${index}`}
       fill={["#df1255","#3467df","#40c980","#af00bd","#cfbf30","#ff8822"][index % 6]} />
       ))}
       </Pie>
       <Legend />
     </PieChart>
   </ResponsiveContainer>
 </div>
 </div>
  );
}

export default App;